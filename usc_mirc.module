<?php

/**
 * @file
 * Module used to house customizations for MIRC@SC.
 */

/**
 * Implements hook_menu().
 */
function usc_mirc_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/preservation-masters'] = array(
    'title' => 'Preservation Masters',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usc_mirc_preservation_masters_form', 2),
    'access callback' => 'usc_mirc_preservation_tab_access',
    'access arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/linked-objects'] = array(
    'title' => 'Linked Objects',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usc_mirc_linked_tab', 2),
    'access callback' => 'usc_mirc_linked_tab_access',
    'access arguments' => array(2),
  );
  $items['admin/islandora/mirc-usc'] = array(
    'title' => 'MIRC@SC',
    'description' => 'Configure settings for the custom MIRC@SC module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usc_mirc_admin_settings'),
    'access arguments' => array('administer usc_mirc'),
    'file' => 'includes/admin.inc',
  );
  $items['islandora/object/%islandora_object/manage/overview/usc-mirc-ingest'] = array(
    'title callback' => 'usc_mirc_retrieve_ingest_title',
    'title arguments' => array(2),
    'access callback' => 'usc_mirc_ingest_access',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'usc_mirc_ingest_page',
    'page arguments' => array(2),
  );
  $items['usc/mezzanine-autocomplete'] = array(
    'page callback' => 'usc_mirc_autocomplete_video_url',
    'page arguments' => array(
      variable_get('usc_mirc_mezzanine_url', '/mnt/mirc/mezz/mezzanine'),
      variable_get('usc_mirc_mezzanine_folder', '/mnt/mirc/mezz/mezzanine'),
      2,
    ),
    'access callback' => 'usc_mirc_role_access_callback',
    'type' => MENU_CALLBACK,
  );
  $items['usc/streaming-autocomplete'] = array(
    'page callback' => 'usc_mirc_autocomplete_video_url',
    'page arguments' => array(
      variable_get('usc_mirc_streaming_url', 'http://dvr-streaming.mirc.sc.edu'),
      variable_get('usc_mirc_streaming_folder', '/mnt/mirc/mezz/access'),
      2,
    ),
    'access callback' => 'usc_mirc_role_access_callback',
    'type' => MENU_CALLBACK,
  );
  $items['usc/create_access_copy'] = array(
    'page callback' => 'usc_mirc_create_access_copy_callback',
    'access arguments' => array(FEDORA_INGEST),
    'file' => 'includes/access_copy.callback.inc',
    'type' => MENU_CALLBACK,
  );
  $items['islandora/object/%islandora_object/manage/overview/usc-mirc-export-pbcore'] = array(
    'title' => "Export PBCORE",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usc_mirc_export_collection_confirm_form', 2),
    'file' => 'includes/export_confirmation.form.inc',
    'access callback' => 'usc_mirc_pbcore_export_access',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function usc_mirc_permission() {
  return array(
    'access MIRC@SC tabs' => array(
      'title' => 'access MIRC@SC tabs',
    ),
    'administer usc_mirc' => array(
      'title' => 'Administer the MIRC@SC custom module.',
    ),
    'access USC video export' => array(
      'title' => 'Let users export MyVideo lists with paths in them.',
    ),
  );
}

/**
 * Determines whether the user has access to ingest new objects or not.
 *
 * @param FedoraObject $object
 *   The FedoraObject.
 *
 * @return bool
 *   TRUE or FALSE depending on access permissions.
 */
function usc_mirc_ingest_access(FedoraObject $object) {
  $usc_models = array(
    'usc:mezzanineCModel',
    'usc:collectionCModel',
    'usc:vroCModel',
  );

  if (islandora_object_access(FEDORA_ADD_DS, $object)) {
    if (array_intersect($usc_models, $object->models)) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Page that loads the required ingest form depending on conditions.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @return array
 *   The Drupal form for the ingest.
 */
function usc_mirc_ingest_page(FedoraObject $object) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');

  $step_object = $object->repository->constructObject('usc');
  if (in_array('usc:mezzanineCModel', $object->models)) {
    drupal_set_title(t('Add a new access variant'));
    return drupal_get_form('islandora_ingest_form', array(
      'models' => array('usc:accessCModel'),
      'objects' => array($step_object),
      'parent' => $object->id,
    ));
  }
  elseif (in_array('usc:collectionCModel', $object->models)) {
    drupal_set_title(t('Add a new preservation master'));
    $step_object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $object->id);
    return drupal_get_form('islandora_ingest_form', array(
      'models' => array('usc:vroCModel'),
      'objects' => array($step_object),
      'parent' => $object->id,
    ));
  }
  elseif (in_array('usc:vroCModel', $object->models)) {
    drupal_set_title(t('Add a new mezzanine'));
    return drupal_get_form('islandora_ingest_form', array(
      'models' => array('usc:mezzanineCModel'),
      'objects' => array($step_object),
      'parent' => $object->id,
    ));
  }
}

/**
 * Implements hook_CModel_islandora_ingest_steps().
 */
function usc_mirc_usc_collectionCModel_islandora_ingest_steps($form_state) {
  return array(
    'usc_policy' => array(
      'weight' => 0,
      'type' => 'callback',
      'module' => 'usc_mirc',
      'do_function' => array(
        'function' => 'usc_mirc_apply_root_policy',
        'args' => array(),
      ),
      'undo_function' => array(
        'function' => 'usc_mirc_undo_root_policy',
        'args' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_CModel_islandora_ingest_steps().
 */
function usc_mirc_usc_accessCModel_islandora_ingest_steps() {
  return array(
    'usc_access' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'usc_mirc_add_access_variant_form',
    ),
  );
}

/**
 * Implements hook_CModel_islandora_ingest_steps().
 */
function usc_mirc_usc_mezzanineCModel_islandora_ingest_steps() {
  return array(
    'usc_mezzanine' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'usc_mirc_add_mezzanine_form',
    ),
  );
}

/**
 * Applies the XACML POLICY USC uses for workflow on the subcollection object.
 *
 * @param array $form_state
 *   The Drupal form state.
 */
function usc_mirc_apply_root_policy(&$form_state) {
  $module_path = drupal_get_path('module', 'usc_mirc');
  $xacml_xml = file_get_contents("$module_path/data/xacml/usc_root_policy.xml");

  foreach ($form_state['islandora']['objects'] as $object) {
    $xacml = new IslandoraXacml($object, $xacml_xml);
    $xacml->writeBackToFedora();
  }
}

/**
 * Removes the XACML POLICY USC uses for workflow on the subcollection object.
 *
 * @param array $form_state
 *   The Drupal form state.
 */
function usc_mirc_undo_root_policy(&$form_state) {
  foreach ($form_state['islandora']['objects'] as $object) {
    $viewable_by_user = 'isViewableByUser';
    $viewable_by_role = 'isViewableByRole';
    $object->purgeDatastream('POLICY');
    $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $viewable_by_user);
    $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $viewable_by_role);

    foreach ($object as $dsid => $value) {
      $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_user);
      $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_role);
    }
  }
}

/**
 * Implements hook_CModel_islandora_xacml_editor_child_query().
 */
function usc_mirc_usc_collectionCModel_islandora_xacml_editor_child_query($object) {
  $collection_relation = variable_get('usc_mirc_collection_relationship', 'isMemberOfCollection');
  $derivative_relation = variable_get('usc_mirc_relationship', 'isDerivativeOf');
  $vro_cmodel = variable_get('usc_mirc_cmodel_vro', 'usc:vroCModel');
  $collection_cmodel_query = "PREFIX fre: <info:fedora/fedora-system:def/relations-external#>
    PREFIX fm: <info:fedora/fedora-system:def/model#>
    SELECT ?object
    FROM <#ri>
    WHERE {
        {
          ?sub fm:hasModel <info:fedora/usc:collectionCModel> {
            ?vro fre:$collection_relation ?sub .
            ?mezz fre:$derivative_relation ?vro .
            ?object fre:$derivative_relation ?mezz
        }
        UNION {
            ?vro fre:$collection_relation ?sub .
            ?object fre:$derivative_relation ?vro
        }
        UNION {
            ?object fre:$collection_relation ?sub
        }
      }
      UNION{
          ?sub fm:hasModel <info:fedora/$vro_cmodel> .
          ?object fre:$derivative_relation ?sub .
      }
      ?object fm:state fm:Active
      FILTER(sameTerm(?sub, <info:fedora/$object->id>))
    }";
  return array(
    'usc_collectionCModel' => array(
      'type' => 'sparql',
      'query' => $collection_cmodel_query,
      'description' => t('All new and existing subelements of this collection (includes vros, mezzanines and access variants).'),
    ),
  );
}

/**
 * Title callback for changing the title for the ingest MENU_ACTION_LINK.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @return string
 *   The title for the MENU_ACTION_LINK.
 */
function usc_mirc_retrieve_ingest_title(FedoraObject $object) {
  if (in_array('usc:mezzanineCModel', $object->models)) {
    return t('Add a new access variant');
  }
  elseif (in_array('usc:collectionCModel', $object->models)) {
    return t('Add a new preservation master');
  }
  elseif (in_array('usc:vroCModel', $object->models)) {
    return t('Add a new mezzanine');
  }
}

/**
 * Determines whether the user has access to the preservation access tab.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @return bool
 *   TRUE or FALSE depending on access conditions.
 */
function usc_mirc_preservation_tab_access($object) {
  if (in_array('usc:collectionCModel', $object->models)) {
    if (user_access('access MIRC@SC tabs')) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Determines whether the user has access to the linked objects tab.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @return bool
 *   TRUE or FALSE depending on access conditions.
 */
function usc_mirc_linked_tab_access($object) {
  if (!is_object($object)) {
    return FALSE;
  }

  if (user_access('access MIRC@SC tabs')) {
    $linked_cmodels = array(
      variable_get('usc_mirc_cmodel_vro', 'usc:vroCModel'),
      variable_get('usc_mirc_cmodel_mezzanine', 'usc:mezzanineCModel'),
    );

    $models_intersect = array_intersect($linked_cmodels, $object->models);
    if (!empty($models_intersect)) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_islandora_required_objects().
 */
function usc_mirc_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'usc_mirc');

  // USC Root Collection.
  $usc_root_collection = $connection->repository->constructObject('usc:mirc');
  $usc_root_collection->owner = 'fedoraAdmin';
  $usc_root_collection->label = 'Moving Image Research Collections';
  $usc_root_collection->models = 'islandora:collectionCModel';
  $usc_root_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  // Add the collection policy.
  $cp = $usc_root_collection->constructDatastream('COLLECTION_POLICY', 'M');
  $cp->label = 'Islandora Collection Policy';
  $cp->mimetype = 'text/xml';
  $cp->setContentFromFile("$module_path/data/datastreams/root_collection/COLLECTION_POLICY.xml", FALSE);
  $usc_root_collection->ingestDatastream($cp);

  // USC Subcollection.
  $usc_collection = $connection->repository->constructObject('usc:collectionCModel');
  $usc_collection->owner = 'fedoraAdmin';
  $usc_collection->label = 'USC Video Collection Content Model';
  $usc_collection->models = 'islandora:collectionCModel';
  $datastream = $usc_collection->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/usc_collectionCModel/DS-COMPOSITE-MODEL.xml", FALSE);
  $usc_collection->ingestDatastream($datastream);

  // USC Access Variants.
  $usc_access = $connection->repository->constructObject('usc:accessCModel');
  $usc_access->owner = 'fedoraAdmin';
  $usc_access->label = 'USC Access Object Content Model';
  $usc_access->models = 'fedora-system:ContentModel-3.0';
  $datastream = $usc_access->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/usc_accessCModel/DS-COMPOSITE-MODEL.xml", FALSE);
  $usc_access->ingestDatastream($datastream);

  // USC VROs.
  $usc_vro = $connection->repository->constructObject('usc:vroCModel');
  $usc_vro->owner = 'fedoraAdmin';
  $usc_vro->label = 'USC Video Resource Object Content Model';
  $usc_vro->models = 'fedora-system:ContentModel-3.0';
  $datastream = $usc_vro->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/usc_vroCModel/DS-COMPOSITE-MODEL.xml", FALSE);
  $usc_vro->ingestDatastream($datastream);

  // USC Mezzanines.
  $usc_mezzanine = $connection->repository->constructObject('usc:mezzanineCModel');
  $usc_mezzanine->owner = 'fedoraAdmin';
  $usc_mezzanine->label = 'USC Mezzanine Object Content Model';
  $usc_mezzanine->models = 'fedora-system:ContentModel-3.0';
  $datastream = $usc_mezzanine->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/usc_mezzanineCModel/DS-COMPOSITE-MODEL.xml", FALSE);
  $usc_mezzanine->ingestDatastream($datastream);
  return array(
    'MIRC@SC' => array(
      'title' => 'MIRC@SC',
      'objects' => array(
        $usc_root_collection,
        $usc_collection,
        $usc_access,
        $usc_vro,
        $usc_mezzanine,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function usc_mirc_islandora_xml_form_builder_form_associations() {
  return array(
    'usc_root_ingest' => array(
      'content_model' => 'usc:collectionCModel',
      'form_name' => 'Collection Description',
      'dsid' => 'MODS',
      'title_field' => array('title_info', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
    'usc_pbcore_preservation_location' => array(
      'content_model' => 'usc:vroCModel',
      'form_name' => 'PBCore Update Preservation Master Location',
      'dsid' => 'PBCORE',
      'title_field' => array('main_title'),
      'transform' => 'pbcore_to_dc.xsl',
      'template' => FALSE,
    ),
    'usc_pbcore_preservation_description' => array(
      'content_model' => 'usc:vroCModel',
      'form_name' => 'PBCore Description Document',
      'dsid' => 'PBCORE',
      'title_field' => array('titles', 'main_title'),
      'transform' => 'pbcore_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_xml_form_builder_get_transforms().
 */
function usc_mirc_xml_form_builder_get_transforms() {
  return array(
    'pbcore_to_dc.xsl' => drupal_get_path('module', 'usc_mirc') . '/transforms/pbcore_to_dc.xsl',
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function usc_mirc_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'usc_mirc');
  return array(
    'Collection Desc Display' => array(
      'form_file' => "$module_path/data/forms/collection_desc_display.xml",
    ),
    'Mezzanine Display' => array(
      'form_file' => "$module_path/data/forms/mezzanine_display.xml",
    ),
    'Short Mezzanine Display' => array(
      'form_file' => "$module_path/data/forms/short_mezzanine_display.xml",
    ),
    'Collection Description' => array(
      'form_file' => "$module_path/data/forms/collection_desc.xml",
    ),
    'PBCore Update Preservation Master Location' => array(
      'form_file' => "$module_path/data/forms/pbcore_master_location.xml",
    ),
    'PBCore Description Document' => array(
      'form_file' => "$module_path/data/forms/pbcore_description.xml",
    ),
  );
}

/**
 * Implements hook_CMODEL_islandora_view_object().
 */
function usc_mirc_usc_vrocmodel_islandora_view_object($object) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  $output = array(
    'metadata' => usc_mirc_metadata_markup($object),
  );
  return array('' => drupal_render($output));
}

/**
 * Implements hook_CMODEL_islandora_view_object().
 */
function usc_mirc_usc_collectioncmodel_islandora_view_object($object) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  $form = array(
    'collection_metadata' => array(
      '#type' => 'fieldset',
      '#title' => '',
      '#collapsible' => FALSE,
      '#collapsed' => TRUE,
      'usc-collection-image' => array(
        '#prefix' => '<div class="usc-collection-image">',
        '#suffix' => '</div>',
        'image_markup' => array(
          '#markup' => usc_mirc_get_image_markup($object->id, 'Collection image', 'Collection image', 'featured_content_image'),
        ),
      ),

    ),
    'collection_members' => array(
      '#type' => 'fieldset',
      '#title' => t('Collection Members'),
      '#collapsible' => FALSE,
      '#collapsed' => TRUE,
      'members' => usc_mirc_collection_members_markup($object),
    ),
  );

  if (isset($object['MODS'])) {
    $mods = $object['MODS']->content;
    $metadata = drupal_get_form('Collection Desc Display', $mods);
    $form['collection_metadata']['MODS_metadata'] = $metadata;
  }
  $output = drupal_render($form);
  return array('' => $output);
}

/**
 * Implements hook_CMODEL_islandora_view_object().
 */
function usc_mirc_usc_mezzaninecmodel_islandora_view_object($object) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  $output = array();
  $output['mezzanine_display'] = array(
    'player' => array(
      '#type' => 'fieldset',
      '#title' => '',
      '#attributes' => array(
        'class' => array('usc-mirc-fieldset-vid'),
      ),
      'flowplayer_video' => usc_mirc_flowplayer_markup($object),
    ),
    'short_metadata' => array(
      '#type' => 'fieldset',
      '#title' => '',
      '#attributes' => array(
        'class' => array('usc-mirc-fieldset-metadata'),
      ),
      'short_metadata' => usc_mirc_metadata_markup($object, TRUE),
    ),
    'full_metadata_fieldset' => array(
      '#title' => t('Full Metadata'),
      '#type' => 'fieldset',
      '#weight' => 15,
      '#attributes' => array(
        'class' => array(
          'collapsible',
          'collapsed',
        ),
      ),
      'full_metadata' => usc_mirc_metadata_markup($object),
    ),
  );
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb[] = l(t('Repository'), 'islandora/object');
  $usc_breadcrumb = usc_mirc_build_breadcrumb($object);
  if ($usc_breadcrumb) {
    $breadcrumb[] = $usc_breadcrumb;
  }
  // Add the preservation master breadcrumb if the user has permission.
  if (user_access('access MIRC@SC tabs')) {
    $parent_pid = usc_mirc_get_mezzanine_parent($object);
    if ($parent_pid) {
      $parent_object = islandora_object_load($parent_pid);
      $breadcrumb[] = l($parent_object->label, "islandora/object/$parent_pid");
    }
  }
  drupal_set_breadcrumb($breadcrumb);
  return array('' => drupal_render($output));
}

/**
 * Generates the form for the preservation masters.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @return array
 *   Preservation masters form.
 */
function usc_mirc_preservation_masters_form(array $form, array &$form_state, FedoraObject $object) {
  $form = array();
  $form['preservation_masters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Collection Members'),
    '#collapsible' => FALSE,
    '#collapsed' => TRUE,
    'members' => usc_mirc_collection_members_markup($object, FALSE),
  );
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb[] = l(t('Repository'), 'islandora/object');
  drupal_set_breadcrumb($breadcrumb);
  return $form;
}

/**
 * Generates the form for the preservation masters.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @return array
 *   The linked objects tab.
 */
function usc_mirc_linked_tab(array $form, array &$form_state, FedoraObject $object) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  $form = array();

  // Tab beginning at mezzanine.
  if (in_array('usc:mezzanineCModel', $object->models)) {
    $form = usc_mirc_mezzanine_linked_tab($object);
  }
  else {
    $form = usc_mirc_preservation_linked_tab($object);
  }
  return $form;
}

/**
 * Builds the linked tab beginning at a mezzanine object.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @return array
 *   The rendered linked tab form for a mezzanine.
 */
function usc_mirc_mezzanine_linked_tab($object) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  $query = "PREFIX fre: <info:fedora/fedora-system:def/relations-external#>
  PREFIX fm: <info:fedora/fedora-system:def/model#>
  PREFIX is: <http://islandora.ca/ontology/relsext#>
  SELECT ?pres ?label
  WHERE {
    <info:fedora/$object->id> fre:isDerivativeOf ?pres .
    ?pres fm:label ?label
    OPTIONAL {
      ?pres is:isViewableByUser ?usr .
      ?pres is:isViewableByRole ?role .
    }";
  $query .= usc_mirc_append_xacml_filter();
  $pres_result = $object->repository->ri->query($query, 'sparql');

  if (count($pres_result) > 0) {
    $pres_pid = $pres_result[0]['pres']['value'];
    $pres_markup = array(
      '#markup' => theme_links(
        array(
          'links' => array(
            "usc-preservation-master-$pres_pid" => array(
              'title' => $pres_result['0']['label']['value'],
              'href' => "islandora/object/$pres_pid",
            ),
          ),
          'attributes' => array(),
          'heading' => array(),
        )
      ),
    );
  }
  else {
    $pres_markup = array(
      '#markup' => t('No linked Preservation Master currently present.'),
    );
  }
  $preservation_master = array(
    'preservation_master' => array(
      '#type' => 'fieldset',
      '#title' => t('Preservation Master'),
      'preservation_link' => $pres_markup,
    ),
  );
  $form = array();
  $form['preservation_master'] = $preservation_master;
  $variants = usc_mirc_get_derivatives($object);
  $form['access_variants'] = usc_mirc_build_child_links($object, 'Access Variants', $variants);
  return $form;
}

/**
 * Generates the markup for the linked objects tab.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @return array
 *   Preservation masters form.
 */
function usc_mirc_preservation_linked_tab(FedoraObject $object) {
  $form = array();
  $relationships = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection');
  $subcollection = $relationships[0]['object']['value'];
  $mezzanines = usc_mirc_get_derivatives($object);
  $form['mezzanines'] = usc_mirc_build_child_links($object, 'Mezzanines', $mezzanines);
  $access_query = "PREFIX fre: <info:fedora/fedora-system:def/relations-external#>
    PREFIX fm: <info:fedora/fedora-system:def/model#>
    PREFIX is: <http://islandora.ca/ontology/relsext#>
    SELECT ?subject ?label
      FROM <#ri>
        WHERE {
    {
      ?sub fm:hasModel <info:fedora/usc:collectionCModel> {
      ?pre fre:isMemberOfCollection <info:fedora/$subcollection> .
            ?mezz fre:isDerivativeOf <info:fedora/$object->id> .
            ?subject fre:isDerivativeOf ?mezz ;
               fm:label ?label ;
               fm:state fm:Active
        }
      }
    OPTIONAL {
      ?subject is:isViewableByUser ?usr .
      ?subject is:isViewableByRole ?role .
    }";
  $access_query .= usc_mirc_append_xacml_filter();
  $access_variants = $object->repository->ri->query($access_query, 'sparql');
  $form['access_variants'] = usc_mirc_build_child_links($object, 'Access Variants', $access_variants);
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb[] = l(t('Repository'), 'islandora/object');
  drupal_set_breadcrumb($breadcrumb);
  return $form;
}

/**
 * Generates the markup for the collection members.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @param bool $mezzanines
 *   Whether we are searching for mezzanines or not.
 *
 * @return string
 *   Markup for the collection members.
 */
function usc_mirc_collection_members_markup(FedoraObject $object, $mezzanines = TRUE) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  $markup = array();
  $per_page = variable_get('usc_mirc_number_per_page', '15');
  $current_page = 0;

  if (!empty($_GET['page'])) {
    $current_page = $_GET['page'];
  }
  if ($mezzanines) {
    $child_num = usc_mirc_get_mezzanine_children($object);
    $results = usc_mirc_get_mezzanine_set($object, $current_page, $per_page);
  }
  else {
    $child_num = usc_mirc_get_vro_children($object);
    $results = usc_mirc_get_vro_set($object, $current_page, $per_page);
  }

  $table_data = array();
  if ($mezzanines) {
    $field = 'mezzanine';
    $field_title = 'mezzanine_title';
  }
  else {
    $field = 'vro';
    $field_title = 'vro_title';
  }
  foreach ($results as $item) {
    if (!(empty($item[$field]) || empty($item[$field]))) {
      $path = "islandora/object/{$item[$field]['value']}";
      $image = usc_mirc_get_image_markup($item[$field]['value'], $item[$field_title]['value'], $item[$field_title]['value']);
      $table_data[] = array(
        'data' => l($image, $path, array('html' => TRUE, 'attributes' => array('class' => 'item-image-link'))) . l($item[$field_title]['value'], $path, array('attributes' => array('class' => 'item-title-text'))),
        'class' => array('collection-members'),
      );
    }
  }
  if (count($table_data) === 0) {
    $markup['data'] = array(
      '#markup' => t('No public video information in this collection, yet.'),
    );
  }
  else {
    $markup['data'] = array(
      '#markup' => theme('item_list', array(
        'items' => $table_data,
        'type' => 'ul',
        'attributes' => array(
          'class' => 'usc-collection-view',
        ),
        )),
    );
    pager_default_initialize($child_num, $per_page);
    $markup['pager'] = array(
      '#markup' => theme('pager'),
    );
  }
  return $markup;
}

/**
 * Generates markup for display purposes from a PBCore record.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @param bool $short
 *   Whether we are attempting to display a shortened display or not.
 *
 * @return string
 *   Markup for the metadata form.
 */
function usc_mirc_metadata_markup($object, $short = FALSE) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');

  if ($short || in_array('usc:mezzanineCModel', $object->models)) {
    $pbcore_pid = usc_mirc_get_mezzanine_parent($object);
  }
  else {
    $pbcore_pid = $object->id;
  }

  if ($pbcore_pid) {
    if ($short || in_array('usc:mezzanineCModel', $object->models)) {
      $pbcore_object = islandora_object_load($pbcore_pid);
    }
    else {
      $pbcore_object = $object;
    }
    if ($pbcore_object['PBCORE']) {
      if ($short) {
        return drupal_get_form('Short Mezzanine Display', $pbcore_object['PBCORE']->content);
      }
      else {
        return drupal_get_form('Mezzanine Display', $pbcore_object['PBCORE']->content);
      }
    }
    else {
      $output = array(
        '#markup' => t('Failed to load the PBCore; Datastream does not exist or the parent object has XACML.'),
      );
      return $output;
    }
  }
  else {
    $output = array(
      '#markup' => t('Failed to load the PBCore; Unable to retrieve pid of object that contains PBCORE.'),
    );
    return $output;
  }
}

/**
 * Generates markup for flowplayer.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 *
 * @return string
 *   Markup for flowplayer.
 */
function usc_mirc_flowplayer_markup(FedoraObject $object) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  $videos = array();
  $derivative_vids = usc_mirc_get_derivatives($object);

  foreach ($derivative_vids as $vid) {
    $pid = $vid['subject']['value'];
    $vid_obj = islandora_object_load($pid);
    $videos[] = $vid_obj['VIDEO']->url;
  }
  return array('#markup' => usc_mirc_mezzanine_player_markup($videos));
}

/**
 * The form for adding a mezzanine.
 *
 * @param array $form
 *   A Drupal form.
 *
 * @param array $form_state
 *   The Drupal form state.
 *
 * @return array
 *   The add a mezzanine form definition.
 */
function usc_mirc_add_mezzanine_form($form, &$form_state) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  $form = array(
    'file_name' => array(
      '#type' => 'textfield',
      '#title' => t('Mezzanine file path'),
      '#description' => t('Used to extract technical metadata.'),
      '#autocomplete_path' => 'usc/mezzanine-autocomplete',
      '#weight' => -20,
    ),
    'derivative_type' => usc_mirc_get_mezzanine_types($form_state),
    'derivative_format' => usc_mirc_get_mezzanine_formats($form_state),
  );
  return $form;
}

/**
 * Validation for the add mezzanine form.
 *
 * @param array $form
 *   A Drupal form.
 *
 * @param array $form_state
 *   The Drupal form state.
 *
 * @throws Exception
 */
function usc_mirc_add_mezzanine_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  $file = $values['file_name'];
  if (empty($file)) {
    form_set_error('file_name', t('Enter a non-empty path for the file field!'));
  }
  elseif (!(is_file($file) && is_readable($file))) {
    form_set_error('file_name', t('The file %file_name (at %file_path) does not seem to exist or is not readable!', array(
      '%file_path' => $file,
      '%file_name' => isset($form['file_name']['#options']) ? $form['file_name']['#options'][$file] : '',
    )));
  }
}

/**
 * Submit handler for the add mezzanine form.
 *
 * @global type $user
 *
 * @param array $form
 *   A Drupal form.
 *
 * @param array $form_state
 *   The Drupal form state.
 */
function usc_mirc_add_mezzanine_form_submit($form, &$form_state) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');

  $parent_object = islandora_object_load($form_state['islandora']['shared_storage']['parent']);
  $object = $form_state['islandora']['objects'][0];
  $object->label = $parent_object->label;
  $object->relationships->add(FEDORA_RELS_EXT_URI, 'isDerivativeOf', $form_state['islandora']['shared_storage']['parent']);
  $object->relationships->add(FEDORA_MODEL_URI, 'hasModel', variable_get('usc_mirc_cmodel_mezzanine', 'usc:mezzanineCModel'));
  $params = array(
    'label' => $parent_object->label,
    'derivative_type' => $form_state['values']['derivative_type'],
    'derivative_format' => $form_state['values']['derivative_format'],
  );
  usc_mirc_generate_video_metadata($form_state['values']['file_name'], $object, $params);
  $form_state['redirect'] = "islandora/object/$object->id";

  if (!isset($object['PBCORE']) || !isset($object['DC'])) {
    watchdog('usc_mirc', "The object @obj is missing PBCore or DC!", array('@obj' => $object->id), WATCHDOG_ERROR);
  }
}

/**
 * The form for adding an access variant.
 *
 * @param array $form
 *   A Drupal form.
 *
 * @param array $form_state
 *   The Drupal form state.
 *
 * @return array
 *   The add access variant form.
 */
function usc_mirc_add_access_variant_form($form, &$form_state) {
  $form = array(
    'title' => array(
      '#type' => 'textfield',
      '#title' => t('Object label'),
      '#required' => TRUE,
    ),
    'streaming_url' => array(
      '#type' => 'textfield',
      '#title' => t('Streaming URL'),
      '#id' => 'usc-mirc-streaming-url',
      '#required' => TRUE,
      '#autocomplete_path' => 'usc/streaming-autocomplete',
    ),
  );
  return $form;
}

/**
 * Validation for the add access variant form.
 *
 * @param array $form
 *   A Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function usc_mirc_add_access_variant_form_validate($form, &$form_state) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  // Need to "convert" the streaming URL to the path on the local file system.
  $streaming_url = variable_get('usc_mirc_streaming_url', 'http://dvr-streaming.mirc.sc.edu');
  if (strpos($form_state['values']['streaming_url'], $streaming_url) === 0) {
    $local_path = format_string('!local_access/!file_part', array(
      '!local_access' => variable_get('usc_mirc_streaming_folder', '/mnt/mirc/mezz/access'),
      '!file_part' => drupal_substr($form_state['values']['streaming_url'], drupal_strlen($streaming_url) + 1),
    ));
    $form_state['local_path'] = $local_path;
  }
  if (!is_null($local_path) && !(is_file($local_path) && is_readable($local_path))) {
    form_set_error('streaming_url', t('The streaming URL does not correspond to a file that exists or is not readable at %file_path', array(
      '%file_path' => $local_path,
    )));
  }
  $parent_object = islandora_object_load($form_state['islandora']['shared_storage']['parent']);
  $params = usc_mirc_retrieve_pbcore_fields($parent_object);
  if ($params == FALSE) {
    form_set_error('streaming_url', t('The parent object @pid contains invalid PBCore! Invalid derivative format or derivative type.', array('@pid' => $parent_object->id)));
  }
  else {
    $form_state['parent_params'] = $params;
  }
}

/**
 * Submit handler for the access variant form.
 *
 * @global type $user
 *
 * @param array $form
 *   A Drupal form.
 *
 * @param array $form_state
 *   The Drupal form state.
 */
function usc_mirc_add_access_variant_form_submit($form, &$form_state) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  $object = $form_state['islandora']['objects'][0];
  $object->label = $form_state['values']['title'];
  $video_ds = $object->constructDatastream('VIDEO', 'R');
  $video_ds->label = 'VIDEO';
  $video_ds->mimetype = 'video/mp4';
  $video_ds->url = $form_state['values']['streaming_url'];
  $object->ingestDatastream($video_ds);
  $object->relationships->add(FEDORA_RELS_EXT_URI, 'isDerivativeOf', $form_state['islandora']['shared_storage']['parent']);
  $object->relationships->add(FEDORA_MODEL_URI, 'hasModel', variable_get('usc_mirc_cmodel_access', 'usc:accessCModel'));
  $form_state['redirect'] = "islandora/object/$object->id";
  usc_mirc_generate_video_metadata($form_state['local_path'], $object, $form_state['parent_params']);

  if (!isset($object['PBCORE']) || !isset($object['DC'])) {
    watchdog('usc_mirc', "The object @obj is missing PBCore or DC!", array('@obj' => $object->id), WATCHDOG_ERROR);
  }
}

/**
 * Autocomplete callback used to obtain streaming URLs.
 */
function usc_mirc_autocomplete_video_url($url_base, $filesystem_base, $string) {
  module_load_include('inc', 'usc_mirc', 'includes/autocomplete');

  $videos = usc_mirc_traverse_directory($url_base, $filesystem_base, $string);
  $videos = array_filter($videos, 'usc_mirc_is_video_filename');

  ksort($videos);
  drupal_json_output($videos);
}

/**
 * Implements hook_image_default_styles().
 */
function usc_mirc_image_default_styles() {
  $styles = array();

  // usc_mirc_thumbnail.
  $styles['usc_mirc_thumbnail'] = array(
    'name' => 'usc_mirc_thumbnail',
    'effects' => array(
      1 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => '200',
          'height' => '200',
          'upscale' => 1,
        ),
        'weight' => '1',
      ),
    ),
  );

  // usc_solr_thumbnail.
  $styles['usc_solr_thumbnail'] = array(
    'name' => 'usc_solr_thumbnail',
    'effects' => array(
      2 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => '150',
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => '1',
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_CMODEL_islandora_solr_results_alter().
 *
 * Restricts and renders fields to display for Solr results referencing
 * collection objects.
 */
function usc_mirc_usc_collectioncmodel_islandora_solr_object_result_alter(&$object_index, $query_processor) {
  $docs = array();
  $fields = array(
    'mods_title_s',
    'mods_abstract_ms',
    'mods_dateCreated_ms',
  );
  foreach ($object_index['solr_doc'] as $field => $value) {
    if (in_array($field, $fields)) {
      $values = (array) $value;
      $docs[$field] = reset($values);
    }
  }
  if (!empty($docs)) {
    $object_index['solr_doc'] = $docs;
  }
}

/**
 * Implements hook_CMODEL_islandora_solr_results_alter().
 *
 * Restricts and renders fields to display for Solr results referencing
 * mezzanineCModel objects.
 */
function usc_mirc_usc_mezzaninecmodel_islandora_solr_object_result_alter(&$object_index, $query_processor) {
  $docs = array();
  $fields = array(
    'pb_parent_title_Main_ms',
    'pb_parent_description_summary_ms',
    'pb_parent_coverage_Temporal_ms',
  );
  foreach ($object_index['solr_doc'] as $field => $value) {
    if (in_array($field, $fields)) {
      $values = (array) $value;
      $docs[$field] = reset($values);
    }
  }
  if (!empty($docs)) {
    $object_index['solr_doc'] = $docs;
  }
}

/**
 * Implements hook_CMODEL_islandora_solr_results_alter().
 *
 * Restricts and renders fields to display for Solr results referencing
 * mezzanineCModel objects.
 */
function usc_mirc_usc_vrocmodel_islandora_solr_object_result_alter(&$object_index, $query_processor) {
  $docs = array();
  $fields = array(
    'pb_title_Main_ms',
    'pb_title_Item_ms',
    'pb_description_summary_ms',
    'pb_coverage_Temporal_ms',
  );
  foreach ($object_index['solr_doc'] as $field => $value) {
    if (in_array($field, $fields)) {
      $values = (array) $value;
      $docs[$field] = reset($values);
    }
  }
  if (!empty($docs)) {
    $object_index['solr_doc'] = $docs;
  }
}

/**
 * Implements hook_islandora_solr_results_alter().
 *
 * Sets a thumbnail URL. USC objects don't all have TN datastreams by default,
 * so we check for a couple other potential image datastreams here. If the
 * object has an image datastream, it gets passed through imagecache external.
 */
function usc_mirc_islandora_solr_results_alter(&$object_results, $query_processor) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  $image_ds = array('TN', 'IMG', 'JPG');
  foreach ($object_results as $key => $object_result) {
    $path = NULL;
    foreach ($object_results[$key]['solr_doc'] as $solr_key => $solr_data) {
      if (is_array($solr_data)) {
        $trunc_solr_data = truncate_utf8($solr_data[0], 256, TRUE, TRUE);
      }
      else {
        $trunc_solr_data = truncate_utf8($solr_data, 256, TRUE, TRUE);
      }
      $object_results[$key]['solr_doc'][$solr_key] = $trunc_solr_data;
    }
    foreach ($image_ds as $ds) {
      if (in_array($ds, $object_result['datastreams'])) {
        $temp_object = islandora_object_load($object_result['PID']);
        $path = usc_mirc_get_imagecache_token_url($temp_object, $ds);
        continue;
      }
    }
    if (!empty($path)) {
      $preset = variable_get('usc_mirc_solr_imagecache_thumbnail_preset', 'usc_solr_thumbnail');
      // Path to local copy of the datastream image.
      $uri = imagecache_external_generate_path($path, $preset);
      // Path to image style generated from the local datastream image.
      $path = image_style_url($preset, $uri);
      $object_results[$key]['thumbnail_url'] = $path;
    }
    else {
      $object_results[$key]['thumbnail_url'] = drupal_get_path('module', 'islandora_solr') . '/images/defaultimg.png';
    }
  }
}

/**
 * Builds a fieldset containing children of the passed in object.
 *
 * @param FedoraObject $object
 *   A FedoraObject.
 * @param string $type
 *   The name of the resultant fieldset.
 * @param array $children
 *   The results of a SPARQL query containing the children to build.
 *
 * @return array
 *   The rendered fieldset.
 */
function usc_mirc_build_child_links($object, $type, $children) {
  $links = array();
  foreach ($children as $child) {
    if ($child['subject']['value'] !== $object->id) {
      $links['usc-' . $child['subject']['value']] = array(
        'title' => $child['label']['value'],
        'href' => 'islandora/object/' . $child['subject']['value'],
      );
    }
  }
  $fieldset = array(
    "$type" => array(
      '#type' => 'fieldset',
      '#title' => $type,
    ),
  );
  if (count($links) > 0) {
    $fieldset["$type"]['theme_links'] = array(
      '#markup' => theme_links(
        array(
          'links' => $links,
          'attributes' => array(),
          'heading' => array(),
        )
      ),
      '#weight' => 10,
    );
  }
  else {
    $fieldset["$type"]['theme_links'] = array(
      '#markup' => t('No linked @type currently present.', array('@type' => $type)),
    );
  }
  return $fieldset;
}

/**
 * Implements hook_islandora_solr_query().
 */
function usc_mirc_islandora_solr_query($islandora_solr_query) {
  global $user;

  $pres_search = array('administrator', 'Creator', 'Editor', 'Manager');
  $accepted_role = array_intersect($pres_search, $user->roles);

  if (empty($accepted_role)) {
    $fq = "+rels_hasModel_uri_ms:(usc\:mezzanineCModel usc\:collectionCModel) +(pb_parent_title_Main_ms:[* TO *] mods_title_s:[* TO *])";
  }
  else {
    $fq = "+rels_hasModel_uri_ms:(usc\:mezzanineCModel usc\:collectionCModel usc\:vroCModel) +(pb_title_Main_ms:[* TO *] pb_parent_title_Main_ms:[* TO *] mods_title_s:[* TO *])";
  }
  $islandora_solr_query->solrParams['fq'][] = $fq;
}

/**
 * Implements islandora_bookmark_export_handler().
 */
function usc_mirc_islandora_bookmark_export_handler() {
  if (user_access('access USC video export')) {
    $usc_mirc = array();
    $usc_mirc['USC']['Text'] = 'usc_mirc_export_objects_as_text';
    $usc_mirc['USC']['CSV'] = 'usc_mirc_export_objects_as_CSV';
    return $usc_mirc;
  }
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 *
 * Removes the block altogether if the object being viewed is a collection.
 */
function usc_mirc_block_view_islandora_bookmark_islandora_bookmark_alter(&$data, $block) {
  if (isset($data['pid'])) {
    $pid = $data['pid'];
    $obj = islandora_object_load($pid);
    if ($obj) {
      $models_to_hide = array(
        'usc:collectionCModel',
        'islandora:collectionCModel',
      );
      if (array_intersect($models_to_hide, $obj->models)) {
        $data['content'] = '';
      }
    }
  }
}

/**
 * Performs USC's custom export functionality.
 *
 * @param array $pids
 *   An array of pids ready for export.
 */
function usc_mirc_export_objects_as_text($pids) {
  $path_export = array();
  $mezz_cmodel = variable_get('usc_mirc_cmodel_mezzanine', 'usc:mezzanineCModel');
  $vro_cmodel = variable_get('usc_mirc_cmodel_vro', 'usc:vroCModel');
  $access_cmodel = variable_get('usc_mirc_cmodel_access', 'usc:accessCModel');
  foreach ($pids as $pid) {
    $object = islandora_object_load($pid);
    if ($object) {
      $path = FALSE;
      if ($object['PBCORE']) {
        $pb_xml = simplexml_load_string($object['PBCORE']->content);
        $pb_xml->registerXPathNamespace('pb', 'http://www.pbcore.org/PBCore/PBCoreNamespace.html');
        if (in_array($vro_cmodel, $object->models)) {
          $pb_results = $pb_xml->xpath('pb:pbcoreInstantiation/pb:instantiationLocation/text()');
          if (!empty($pb_results)) {
            foreach ($pb_results as $result) {
              $potential_path = (string) reset($result);
              preg_match('/\/(.*)/', $potential_path, $path_match);
              if (!empty($path_match)) {
                $path = $path_match[0];
                // USC had a change requested detailed in ONTIME-1853 to change
                // the path of what we grab from PBCORE from
                // /mnt/mirc/mezz/mezzanine/file to
                // /Volumes/mircarch/archival/file. We'll do this here.
                $path = str_replace('/mnt/mirc/arch', '/Volumes/mircarch', $path);
                break;
              }
            }
          }
        }
        elseif (array_intersect(array($mezz_cmodel, $access_cmodel), $object->models)) {
          $pb_results = $pb_xml->xpath('pb:instantiationIdentifier/text()');
          if (!empty($pb_results)) {
            $path = (string) $pb_results[0];
            // USC had a change requested detailed in ONTIME-1853 to change the
            // path of what we grab from PBCORE from
            // /mnt/mirc/mezz/mezzanine/file to /Volumes/mircmezz/mezzanine/file
            // and Volumes/mircmezz/access/file. We'll do this here.
            $path = str_replace('/mnt/mirc/mezz', '/Volumes/mircmezz', $path);
          }
        }
        if ($path) {
          $path_export[] = $path;
        }
      }
    }
  }
  if (!empty($path_export)) {
    $export_text = fopen('php://output', 'w');
    $count = 0;
    foreach ($path_export as $path) {
      if ($count == 0) {
        fwrite($export_text, $path);
      }
      else {
        fwrite($export_text, PHP_EOL . $path);
      }
      $count++;
    }
    fclose($export_text);
    drupal_add_http_header('Content-Type', 'text/plain');
    drupal_add_http_header('Content-Disposition', 'attachment;filename=my_video_export.txt');
    drupal_exit();
  }
}

/**
 * Performs USC's custom export functionality in CSV form.
 *
 * @param array $pids
 *   An array of pids ready for export.
 */
function usc_mirc_export_objects_as_CSV($pids) {
  module_load_include('inc', 'usc_mirc', 'includes/utilities');
  // Send response headers to the browser.
  $csv_array = array();
  // The pres_masters array is mapped in the form of preservation master pid =>
  // array of pids it's related to. Thus we do not go out and make multiple
  // calls when XPATHing PBCore as the majority of the fields only exist
  // at the preservation master level.
  $pres_masters = array();
  // The mapping array holds the 1-to-1 mapping of pid => preservation master.
  $mapping = array();
  foreach ($pids as $pid) {
    $object = islandora_object_load($pid);
    // It's a preservation master.
    if (in_array('usc:vroCModel', $object->models)) {
      $pres_masters[$pid][] = $pid;
      $mapping[$pid] = $pid;
    }
    // It's a mezzanine!
    elseif (in_array('usc:mezzanineCModel', $object->models)) {
      $pres_rel = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isDerivativeOf');
      $pres_masters[$pres_rel[0]['object']['value']][] = $pid;
      $mapping[$pid] = $pres_rel[0]['object']['value'];
    }
    // It's a access variant!
    elseif (in_array('usc:accessCModel', $object->models)) {
      $mezz_rel = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isDerivativeOf');
      $mezz_pid = $mezz_rel[0]['object']['value'];
      $mezz_object = islandora_object_load($mezz_pid);
      $pres_rel = $mezz_object->relationships->get(FEDORA_RELS_EXT_URI, 'isDerivativeOf');
      $pres_masters[$pres_rel[0]['object']['value']][] = $pid;
      $mapping[$pid] = $pres_rel[0]['object']['value'];
    }
  }
  $pres_metadata = array();
  foreach ($pres_masters as $pres_pid => $pid_array) {
    $pres_metadata[$pres_pid] = usc_mirc_extract_metadata_from_preservation_master($pres_pid);
  }
  foreach ($pids as $pid) {
    $type = t('Islandora Object');
    if (array_key_exists($pid, $mapping)) {
      $temp_object = islandora_object_load($pid);
      if (array_intersect(array('usc:mezzanineCModel', 'usc:accessCModel'), $temp_object->models)) {
        $title = usc_mirc_extract_title_from_pbcore($pid);
        if (in_array('usc:mezzanineCModel', $temp_object->models)) {
          $type = t('Mezzanine');
        }
        elseif (in_array('usc:accessCModel', $temp_object->models)) {
          $type = t('Access Variant');
        }
      }
      elseif (in_array('usc:vroCModel', $temp_object->models)) {
        $title = $pres_metadata[$pid]['title'];
        $type = t('Preservation Master');
      }
      $csv_array[] = array(
        $pid,
        $type,
        $title,
        $pres_metadata[$mapping[$pid]]['item_title'],
        $pres_metadata[$mapping[$pid]]['start_date'],
        $pres_metadata[$mapping[$pid]]['end_date'],
        $pres_metadata[$mapping[$pid]]['description'],
        $pres_metadata[$mapping[$pid]]['temporal_coverage'],
        $pres_metadata[$mapping[$pid]]['sound'],
        $pres_metadata[$mapping[$pid]]['donor'],
        $pres_metadata[$mapping[$pid]]['copyright_statement'],
        $pres_metadata[$mapping[$pid]]['preservation_statement'],
      );
    }
    else {
      $csv_array[] = array(
        $pid,
        $type,
        $title,
      );
    }
  }
  drupal_add_http_header('Content-Type', 'text/csv');
  drupal_add_http_header('Content-Disposition', 'attachment;filename=islandora_bookmark_export.csv');

  $fp = fopen('php://output', 'w');
  fputcsv($fp, array(
    t('PID'),
    t('Object Type'),
    t('Title'),
    t('Item Title'),
    t('Production Start Date'),
    t('Production End Date'),
    t('Description'),
    t('Temporal Coverage'),
    t('Silent or Sound'),
    t('Donor'),
    t('Copyright Statement'),
    t('Preservation Statement'),
  ));
  foreach ($csv_array as $line) {
    fputcsv($fp, $line);
  }
  fclose($fp);
  drupal_exit();
}

/**
 * Implements hook_islandora_handle_get_xsl_files().
 */
function usc_mirc_islandora_handle_get_xsl_files() {
  $transform_options = array();
  $path = drupal_get_path('module', 'usc_mirc') . '/transforms/handle_the_PBCore.xsl';
  $transform_options[$path] = 'handle_the_PBCore.xsl';
  return $transform_options;
}

/**
 * Determines whether or not to show the pbcore export link for a collection.
 *
 * @param AbstractObject $obj
 *   The collection to show the link for.
 *
 * @return bool
 *   Whether or not to show the link.
 */
function usc_mirc_pbcore_export_access($obj) {
  return in_array('usc:collectionCModel', $obj->models) && usc_mirc_role_access_callback();
}

/**
 * Determine if the user has one of the generally allowed roles.
 */
function usc_mirc_role_access_callback() {
  global $user;

  $roles = array(
    'administrator',
    'Creator',
    'Editor',
    'Manager',
  );

  return (count(array_intersect($roles, $user->roles)) > 0);
}
